{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/v1/pricing/getcpumemprice": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Gets maximum price estimate for cpu and memory",
                "parameters": [
                    {
                        "description": "Amount of resources to estimate pricing for",
                        "name": "pricingRequst",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credits.PricingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "total": {
                                            "type": "number"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/pricing/gethddprice": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Gets maximum price estimate for hard drive",
                "parameters": [
                    {
                        "description": "Amount of resources to estimate pricing for",
                        "name": "pricingRequst",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credits.PricingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "total": {
                                            "type": "number"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/user/build/:buildID/service": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns the service that a given build belongs to",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BuildPipeline ID",
                        "name": "buildID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.BuildPipeline"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/user/deployment/:deploymentID/service": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns the service that a given deployment belongs to",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Deployment ID",
                        "name": "deploymentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Deployment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/user/project/:projectID/databases": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all CustomerDatabases associated with a given Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "projectID associated with CustomerDatabase",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "databases": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.CustomerDatabase"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/getbuildlogs": {
            "post": {
                "description": "Login not required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get logs from build pipeline of the specified build ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/logQueries.ReturnValues"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/getdeploylogs": {
            "post": {
                "description": "Login not required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get logs from deploy pipeline of the specified deploy ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/logQueries.ReturnValues"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/metrics/getdailytimeseriesdataservice": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get time series data for a service",
                "parameters": [
                    {
                        "description": "Parameters needed to make metrics query",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmQuery.TSMetricsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/vmQuery.TimeSeriesMetrics"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/metrics/gettimeseriesdatacustomer": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get time series data for a customer",
                "parameters": [
                    {
                        "description": "Parameters needed to make metrics query",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmQuery.TSMetricsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/vmQuery.TimeSeriesMetrics"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/metrics/gettimeseriesdataproject": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get time series data for a project",
                "parameters": [
                    {
                        "description": "Parameters needed to make metrics query",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vmQuery.TSMetricsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/vmQuery.TimeSeriesMetrics"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/databases": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all CustomerDatabases associated with a given Organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Organization",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.CustomerDatabase"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Repository Attributes",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Repository"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Repository"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo/:repoID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Deletes a single Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID of the Repository",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "string": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "put": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Repository Attributes",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Repository"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Repository"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo/:repoID/regeneratesshkeys": {
            "patch": {
                "description": "Requires user login\nSSH keys are used to pull from the User's private repositories.  This endpoint will regenerate the public private SSH keypair.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Regenerate SSH Keys for Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID of the Repository",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Repository"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo/:repoID/services": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Services associated with a Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "repoID associated with Service",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "repos": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Repository"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo/:repoID/updatebranches": {
            "patch": {
                "description": "Requires user login\nSSH keys will be used to get git remote references and update the branch names with latest commit hashes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get branches and commit hashes from git remote and return Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID of the Repository",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Repository"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repo/:repoID/updatecommithashes": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns a single Repository",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID of the Repository",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "branchHistories": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.BranchHistory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/repos": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Repositories associated with an Organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "orgID associated with Repository",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "repos": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Repository"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/:orgID/users/invite": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Invite User to Org",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Email",
                        "name": "inviteUserToOrg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.inviteUserToOrg"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/exists": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Verify Organization Name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Name",
                        "name": "OrgName",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/register": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create Organization and email invites to new Users",
                "parameters": [
                    {
                        "description": "Org name, list of user emails and roles",
                        "name": "orgSignUp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.orgSignUp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "org": {
                                            "$ref": "#/definitions/models.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/org/register-user/:registrationtoken": {
            "post": {
                "description": "Creates a user from an email invitation link and associates with correct Organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a User from Email Invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registration Token from Invitation Email",
                        "name": "registrationtoken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "user": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/repo/branch": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Branches from a Repository",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "branches": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Branch"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/service/:serviceID/repo": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Repositories associated with a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with Repository",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "repos": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Repository"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/stripe/createpi": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a stripe payment intent for a customer",
                "parameters": [
                    {
                        "description": "Payment intent amount",
                        "name": "intent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.IntentJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "clientSecret": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/stripe/getpk": {
            "get": {
                "description": "No user login required",
                "produces": [
                    "application/json"
                ],
                "summary": "Get stripe publishable key for rendering stripe elements",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "publishableKey": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/stripe/updatepi": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update payment intent",
                "parameters": [
                    {
                        "description": "Update payment intent request",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stripe.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns single User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "user": {
                                            "$ref": "#/definitions/models.UserApiResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/:emailID/createVerification": {
            "post": {
                "description": "Creates a url which can be used to verify a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create an Email Verification Link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email ID for the verification URL",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "url": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/:orgID/update-org-name": {
            "patch": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Organization Name",
                "parameters": [
                    {
                        "description": "Org name",
                        "name": "orgNameUpdateInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.orgNameUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "org": {
                                            "$ref": "#/definitions/models.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/addpaymentmethod": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add a payment method to customer",
                "parameters": [
                    {
                        "description": "Stripe Payment Method",
                        "name": "paymentMethod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/master-blaster_stripe.PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/createsetupintent": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a Stripe setup intent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "setupIntent": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/createsubscription": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a subscription for a customer",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "subscriptionID": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/deletepaymentmethod": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete customer payment method",
                "parameters": [
                    {
                        "description": "Stripe Payment Method",
                        "name": "paymentMethod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/master-blaster_stripe.PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getcreditsummarydata": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get customers credit summary data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.SummaryData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getinvoicehistory": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all customer's invoices(payment intents)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/master-blaster_stripe.Invoice"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getmonthlyconsumption": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get customer monthly used credits",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "monthlyConsumption": {
                                            "type": "number"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getnextpaymentdate": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get customer's next date they will be billed",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "nextBillingDate": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "billingType": {
                                            "type": "string"
                                        },
                                        "nextBillingDate": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getpaymentmethods": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all of the customer's payment methods info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/master-blaster_stripe.PaymentMethod"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/master-blaster_stripe.PaymentMethod"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/getusertankstats": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get customer gas tank stats (top of tank, credits remaining, current useage)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        " billingType": {
                                            "type": "string"
                                        },
                                        " creditsRemaining": {
                                            "type": "number"
                                        },
                                        " currentUsage": {
                                            "type": "number"
                                        },
                                        "topOfTank": {
                                            "type": "number"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/updatecreditbalance": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update customer credit balance from successful payment intent",
                "parameters": [
                    {
                        "description": "Stripe Update Request",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stripe.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/billing/updateprimarypaymentmethod": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Change primary payment method",
                "parameters": [
                    {
                        "description": "Stripe Payment Method",
                        "name": "paymentMethod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/master-blaster_stripe.PaymentMethod"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/builds": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all BuildPipelines across all organizations for a User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "builds": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.BuildPipeline"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/builds/:serviceID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Return all BuildPipelines for a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with BuildPipeline",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "builds": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.BuildPipeline"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/builds/:serviceID/startbuild": {
            "post": {
                "description": "Requires user login\nThis endpoint will create a BuildPipline Arango document and kick off a Tekton PipelineRun to build the Service using the associated Git Repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Kick off BuildPipeline for Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID of the Service for which the build Tekton PipelineRun should be kicked off",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "git Branch to be deployed",
                        "name": "branch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Branch"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "build": {
                                            "$ref": "#/definitions/models.BuildPipeline"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/customer/:customerID/update": {
            "put": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Customer Details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "user": {
                                            "$ref": "#/definitions/models.Customer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/customers": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get List of Customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customers": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Customer"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/database/:databaseID": {
            "put": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a CustomerDatabase given a databaseID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the CustomerDatabase",
                        "name": "databaseID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer Database Attributes",
                        "name": "customerDatabase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerDatabase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "$ref": "#/definitions/models.CustomerDatabase"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/database/:databaseID/startdeploy": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Deploy a CustomerDatabase",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the CustomerDatabase",
                        "name": "databaseID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "$ref": "#/definitions/models.CustomerDatabase"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/databases": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all CustomerDatabases for all Organizations the User belongs to",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "databases": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.CustomerDatabase"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/deployments": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Deployments for all Organizations the User belongs to",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Deployment"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/deployments/:serviceID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Deployments that belong to a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Organization",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Deployment"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/deployments/:serviceID/startdeploy": {
            "post": {
                "description": "Requires user login\nThis endpoint will create a Deployment Arango document and kick off an initial Deploy to deploy the Service using the latest build image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Kick off initial Deploypipeline for Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID of the Service for which the DeployPipeline should be kicked off",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "build": {
                                            "$ref": "#/definitions/models.Deployment"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/deployments/:serviceID/teardown": {
            "post": {
                "description": "Requires user login\nThis endpoint will create a Deployment Arango document and kick off a Deploy to teardown the Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Kick off Teardown Deploypipeline for Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID of the Service for which the DeployPipeline should be kicked off",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "build": {
                                            "$ref": "#/definitions/models.Deployment"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/exists": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Verify User Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "X-Dome-Email",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/forgot-password": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Send password reset email to User",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "forgotPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/invite/delete-invite/:inviteID": {
            "delete": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Invitation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "inviteID of Invitation",
                        "name": "inviteID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login User and return JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User email and password",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "logged-in": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logout User session",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/onboarding-tasks": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Onboarding Tasks for the User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID for which the data needs to be fetched",
                        "name": "X-Dome-OrgID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "onboarding-tasks": {
                                            "$ref": "#/definitions/controllers.onboardingTaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/orgs": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Return Organizations User belongs to",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "orgs": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Organization"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/orgs/invitations": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Invitations for a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "invitations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Invitation"
                                            }
                                        },
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/orgs/members": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Users across all Organizations the User is associated with",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "members": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.User"
                                            }
                                        },
                                        "meta": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/project/:projectID/databases": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a CustomerDatabase",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "projectID associated with CustomerDatabase",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer Database Attributes",
                        "name": "customerDatabase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerDatabase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "$ref": "#/definitions/models.CustomerDatabase"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/project/:projectID/databases/:databaseID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns CustomerDatabase associated with a CustomerDatabase ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "projectID associated with CustomerDatabase",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "databaseID associated with CustomerDatabase",
                        "name": "databaseID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "databases": {
                                            "$ref": "#/definitions/models.CustomerDatabase"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/project/:projectID/repo/:repoID/service/create": {
            "post": {
                "description": "Requires user login\nThis endpoint will create new Service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "projectID associated with Service",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID associated with Service",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service Params",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/projects": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Return Organizations User belongs to",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "projects": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Project"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/projects/create-project": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a Project and associate with Organization",
                "parameters": [
                    {
                        "description": "Project Attributes and OrgID",
                        "name": "projectInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateProjectInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "project": {
                                            "$ref": "#/definitions/models.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/projects/update-default-project": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a Project to be the default project in an Organization",
                "parameters": [
                    {
                        "description": "Current Default Project ID, New Default Project ID and Organization ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.projectDefaultUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/projects/update-last-used-project": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a Project to be the last used project in an Organization",
                "parameters": [
                    {
                        "description": "Current Last Used Project ID, New Last Used Project ID and Organization ID",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.projectLastUsedUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/publicrepos": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Public Repositories added by User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "repos": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Repository"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a User",
                "parameters": [
                    {
                        "description": "Register User Input",
                        "name": "registerUserInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.registerUserInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        " org": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        " user": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "message": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/repos": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Repositories created by User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "repos": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Repository"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/resend-invite": {
            "post": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Resend Invitation to an Email to join an Organization",
                "parameters": [
                    {
                        "description": "Email Of the Invitee and Name Of the Organization",
                        "name": "inviteInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.InviteInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/reset-password/": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Reset User password In the App",
                "parameters": [
                    {
                        "description": "Current Password and New Password",
                        "name": "inAppResetInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/reset-password/:resettoken": {
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Reset User password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Password reset token from email",
                        "name": "resettoken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/:serviceID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with Service",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/:serviceID/": {
            "delete": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with Service",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/:serviceID/builds/:buildID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Return a single BuildPipeline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with BuildPipeline",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "BuildPipeline ID",
                        "name": "buildID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "build": {
                                            "$ref": "#/definitions/models.BuildPipeline"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/:serviceID/deployments/:deploymentID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns a single Deployment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the Organization",
                        "name": "orgID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "customerDatabase": {
                                            "$ref": "#/definitions/models.Deployment"
                                        },
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/:serviceID/repo/:repoID": {
            "put": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a Service",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with Service",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "repoID associated with Service",
                        "name": "repoID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service Attributes",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Service"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/service/serviceID/update": {
            "patch": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Updates fields for a Service Setting",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "serviceID associated with Service",
                        "name": "serviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "meta": {
                                            "$ref": "#/definitions/driver.DocumentMeta"
                                        },
                                        "repo": {
                                            "$ref": "#/definitions/models.Service"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/services": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Services across all Organizations the User belongs to",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Service"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/services/:projectID": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all Services associated with a given Project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "projectID associated with Services",
                        "name": "projectID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "metas": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/driver.DocumentMeta"
                                            }
                                        },
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Service"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/services/validname": {
            "get": {
                "description": "Requires user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Validate if a service name is unique within current user's services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Name",
                        "name": "ServiceName",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/update-onboarding-tasks": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update Onboarding Tasks for the User",
                "parameters": [
                    {
                        "description": "Created Project, Created Service, Created Database, Linked Repository and Organization ID",
                        "name": "taskInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.onboardingTaskInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/verify/:token": {
            "post": {
                "description": "Verify a user from an email verification link and set their user as verified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Verify a User from verification email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token from verification URL",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/gin.H"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apis.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nWe use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic\ndifferences (all other things held constant).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.VolatileTime"
                        }
                    ]
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.ConditionSeverity"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.\n+required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of condition.\n+required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.ConditionType"
                        }
                    ]
                }
            }
        },
        "apis.ConditionSeverity": {
            "type": "string",
            "enum": [
                "",
                "Warning",
                "Info"
            ],
            "x-enum-varnames": [
                "ConditionSeverityError",
                "ConditionSeverityWarning",
                "ConditionSeverityInfo"
            ]
        },
        "apis.ConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "Succeeded"
            ],
            "x-enum-varnames": [
                "ConditionReady",
                "ConditionSucceeded"
            ]
        },
        "apis.VolatileTime": {
            "type": "object",
            "properties": {
                "inner": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateProjectInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                }
            }
        },
        "controllers.InviteInput": {
            "type": "object",
            "required": [
                "email",
                "org"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "org": {
                    "type": "string"
                }
            }
        },
        "controllers.inviteUserToOrg": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "controllers.onboardingTaskInput": {
            "type": "object",
            "properties": {
                "created-project": {
                    "type": "boolean"
                },
                "deployed-database": {
                    "type": "boolean"
                },
                "deployed-service": {
                    "type": "boolean"
                },
                "linked-repository": {
                    "type": "boolean"
                },
                "org-id": {
                    "type": "string"
                }
            }
        },
        "controllers.onboardingTaskResponse": {
            "type": "object",
            "properties": {
                "created-project": {
                    "type": "boolean"
                },
                "deployed-database": {
                    "type": "boolean"
                },
                "deployed-service": {
                    "type": "boolean"
                },
                "linked-repository": {
                    "type": "boolean"
                }
            }
        },
        "controllers.orgNameUpdateInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.orgSignUp": {
            "type": "object",
            "properties": {
                "email-list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "role-list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controllers.projectDefaultUpdateInput": {
            "type": "object",
            "properties": {
                "current-default": {
                    "type": "string"
                },
                "new-default": {
                    "type": "string"
                },
                "org-id": {
                    "type": "string"
                }
            }
        },
        "controllers.projectLastUsedUpdateInput": {
            "type": "object",
            "properties": {
                "current-last-used": {
                    "type": "string"
                },
                "new-last-used": {
                    "type": "string"
                },
                "org-id": {
                    "type": "string"
                }
            }
        },
        "controllers.registerUserInput": {
            "type": "object",
            "properties": {
                "email-list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organization": {
                    "type": "string"
                },
                "role-list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "credits.PricingRequest": {
            "type": "object",
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "hdd": {
                    "type": "integer"
                },
                "mem": {
                    "type": "integer"
                }
            }
        },
        "deploypipeline.HorizontalPodScaleLimit": {
            "type": "object",
            "properties": {
                "instances": {
                    "type": "integer"
                },
                "targetCPU": {
                    "type": "integer"
                },
                "targetHDD": {
                    "type": "integer"
                },
                "targetRAM": {
                    "type": "integer"
                }
            }
        },
        "deploypipeline.Networking": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "deploypipeline.VerticalPodScaleLimit": {
            "type": "object",
            "properties": {
                "maxCPU": {
                    "type": "integer"
                },
                "maxHDD": {
                    "type": "integer"
                },
                "maxRAM": {
                    "type": "integer"
                }
            }
        },
        "deploypipeline.Volume": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "driver.DocumentMeta": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "_key": {
                    "type": "string"
                },
                "_oldRev": {
                    "type": "string"
                },
                "_rev": {
                    "type": "string"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "github_com_crunchydata_postgres-operator_pkg_apis_postgres-operator_crunchydata_com_v1beta1.Sidecar": {
            "type": "object",
            "properties": {
                "resources": {
                    "description": "Resource requirements for a sidecar container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                }
            }
        },
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "k8s_io_api_core_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "logQueries.ReturnValues": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "master-blaster_stripe.Invoice": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "issued": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "master-blaster_stripe.PaymentMethod": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "holder": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "last4": {
                    "type": "string"
                }
            }
        },
        "models.Branch": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.BranchHistory": {
            "type": "object",
            "properties": {
                "branch": {
                    "type": "string"
                },
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CommitEntry"
                    }
                }
            }
        },
        "models.BuildPipeline": {
            "type": "object",
            "properties": {
                "branch": {
                    "$ref": "#/definitions/models.Branch"
                },
                "completed-timestamp": {
                    "type": "string"
                },
                "done": {
                    "type": "boolean"
                },
                "imagename": {
                    "type": "string"
                },
                "imageurl": {
                    "type": "string"
                },
                "initialized-timestamp": {
                    "type": "string"
                },
                "started": {
                    "type": "boolean"
                },
                "statushistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apis.Condition"
                    }
                }
            }
        },
        "models.CommitEntry": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Customer": {
            "type": "object",
            "properties": {
                "billing-email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.CustomerDatabase": {
            "type": "object",
            "required": [
                "deployRegion",
                "name",
                "type"
            ],
            "properties": {
                "databaseAccess": {
                    "$ref": "#/definitions/models.DatabaseAccess"
                },
                "deployRegion": {
                    "type": "string"
                },
                "deploySpecHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PostgresClusterSpec"
                    }
                },
                "deployStatusHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PostgresClusterStatus"
                    }
                },
                "diskSize": {
                    "description": "in Mi",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "networkAccess": {
                    "$ref": "#/definitions/models.NetworkAccess"
                },
                "publicDomain": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "models.DatabaseAccess": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Deployment": {
            "type": "object",
            "properties": {
                "deploystatushistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DeploymentCondition"
                    }
                },
                "done": {
                    "type": "boolean"
                },
                "imagename": {
                    "type": "string"
                },
                "imageurl": {
                    "type": "string"
                },
                "initializedtimestamp": {
                    "type": "string"
                },
                "kubeservicespechistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ServiceSpec"
                    }
                },
                "kubeservicestatushistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ServiceStatus"
                    }
                },
                "started": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.EnvVars": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "models.ForgotPasswordInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.IntentJSON": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "futurePayment": {
                    "type": "boolean"
                },
                "paymentMethod": {
                    "type": "string"
                }
            }
        },
        "models.Invitation": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "expiresat": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.NetworkAccess": {
            "type": "object",
            "properties": {
                "clusterInternalHostname": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "models.Organization": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "admin": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "creation-date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ProjectData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServicesData"
                    }
                },
                "totalCost": {
                    "type": "number"
                }
            }
        },
        "models.Repository": {
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "properties": {
                "branches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Branch"
                    }
                },
                "isPrivate": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sshprivateKey": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sshpublicKey": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "buildPipelineInitForService": {
                    "type": "boolean"
                },
                "creditConsumption": {
                    "type": "number"
                },
                "deployUrl": {
                    "type": "string"
                },
                "deployRegion": {
                    "type": "string"
                },
                "environmentVariables": {
                    "$ref": "#/definitions/models.EnvVars"
                },
                "isVisible": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networking": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploypipeline.Networking"
                    }
                },
                "status": {
                    "type": "string"
                },
                "verticalAndHorizontalAutoscale": {
                    "$ref": "#/definitions/deploypipeline.HorizontalPodScaleLimit"
                },
                "verticalAutoscale": {
                    "$ref": "#/definitions/deploypipeline.VerticalPodScaleLimit"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploypipeline.Volume"
                    }
                }
            }
        },
        "models.ServicesData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalCost": {
                    "type": "number"
                }
            }
        },
        "models.SummaryData": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectData"
                    }
                },
                "subTotal": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "country",
                "email",
                "firstname",
                "password"
            ],
            "properties": {
                "activemonths": {
                    "type": "string"
                },
                "avatarurl": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "lastname": {
                    "type": "string"
                },
                "monthlyspending": {
                    "type": "string"
                },
                "orgrole": {
                    "type": "string"
                },
                "orgsize": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "plannedusage": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "salesassociate": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserApiResponse": {
            "type": "object",
            "required": [
                "country",
                "date-added",
                "email",
                "firstname",
                "password",
                "title"
            ],
            "properties": {
                "active": {
                    "type": "string"
                },
                "activemonths": {
                    "type": "string"
                },
                "avatarurl": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "date-added": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires-at": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "lastname": {
                    "type": "string"
                },
                "monthlyspending": {
                    "type": "string"
                },
                "orgrole": {
                    "type": "string"
                },
                "orgsize": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "plannedusage": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "salesassociate": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string"
                }
            }
        },
        "stripe.UpdateRequest": {
            "type": "object",
            "properties": {
                "futurePayment": {
                    "type": "boolean"
                },
                "pi": {
                    "type": "string"
                },
                "pm": {
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAffinity"
                        }
                    ]
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinity"
                        }
                    ]
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAntiAffinity"
                        }
                    ]
                }
            }
        },
        "v1.Capabilities": {
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "description": "Removed capabilities\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.ClientIPConfig": {
            "type": "object",
            "properties": {
                "timeoutSeconds": {
                    "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Type=string\n+kubebuilder:validation:Format=date-time",
                    "type": "string"
                },
                "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=32768",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:MaxLength=1024\n+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=`^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$`",
                    "type": "string"
                },
                "status": {
                    "description": "status of the condition, one of True, False, Unknown.\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Enum=True;False;Unknown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+required\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.Container": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerResizePolicy"
                    }
                },
                "resources": {
                    "description": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.ContainerResizePolicy": {
            "type": "object",
            "properties": {
                "resourceName": {
                    "description": "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceName"
                        }
                    ]
                },
                "restartPolicy": {
                    "description": "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceResizeRestartPolicy"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentCondition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "type": "string"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "type": "string"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of deployment condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DeploymentConditionType"
                        }
                    ]
                }
            }
        },
        "v1.DeploymentConditionType": {
            "type": "string",
            "enum": [
                "Available",
                "Progressing",
                "ReplicaFailure"
            ],
            "x-enum-varnames": [
                "DeploymentAvailable",
                "DeploymentProgressing",
                "DeploymentReplicaFailure"
            ]
        },
        "v1.DownwardAPIProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.DownwardAPIVolumeFile": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.ExecAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.GRPCAction": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer"
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
                    "type": "string"
                }
            }
        },
        "v1.HTTPGetAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.URIScheme"
                        }
                    ]
                }
            }
        },
        "v1.HTTPHeader": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The header field name",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            }
        },
        "v1.IPFamily": {
            "type": "string",
            "enum": [
                "IPv4",
                "IPv6"
            ],
            "x-enum-varnames": [
                "IPv4Protocol",
                "IPv6Protocol"
            ]
        },
        "v1.IPFamilyPolicy": {
            "type": "string",
            "enum": [
                "SingleStack",
                "PreferDualStack",
                "RequireDualStack"
            ],
            "x-enum-varnames": [
                "IPFamilyPolicySingleStack",
                "IPFamilyPolicyPreferDualStack",
                "IPFamilyPolicyRequireDualStack"
            ]
        },
        "v1.KeyToPath": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the key to project.",
                    "type": "string"
                },
                "mode": {
                    "description": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
                    "type": "string"
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.\n+patchMergeKey=key\n+patchStrategy=merge",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Lifecycle": {
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                }
            }
        },
        "v1.LifecycleHandler": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                }
            }
        },
        "v1.LoadBalancerIngress": {
            "type": "object",
            "properties": {
                "hostname": {
                    "description": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional",
                    "type": "string"
                },
                "ip": {
                    "description": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional",
                    "type": "string"
                },
                "ports": {
                    "description": "Ports is a list of records of service ports\nIf used, every port defined in the service should have an entry in it\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PortStatus"
                    }
                }
            }
        },
        "v1.LoadBalancerStatus": {
            "type": "object",
            "properties": {
                "ingress": {
                    "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LoadBalancerIngress"
                    }
                }
            }
        },
        "v1.LocalObjectReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.MountPropagationMode": {
            "type": "string",
            "enum": [
                "None",
                "HostToContainer",
                "Bidirectional"
            ],
            "x-enum-varnames": [
                "MountPropagationNone",
                "MountPropagationHostToContainer",
                "MountPropagationBidirectional"
            ]
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.NodeInclusionPolicy": {
            "type": "string",
            "enum": [
                "Ignore",
                "Honor"
            ],
            "x-enum-varnames": [
                "NodeInclusionPolicyIgnore",
                "NodeInclusionPolicyHonor"
            ]
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist",
                "Gt",
                "Lt"
            ],
            "x-enum-varnames": [
                "NodeSelectorOpIn",
                "NodeSelectorOpNotIn",
                "NodeSelectorOpExists",
                "NodeSelectorOpDoesNotExist",
                "NodeSelectorOpGt",
                "NodeSelectorOpLt"
            ]
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.PersistentVolumeAccessMode": {
            "type": "string",
            "enum": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ],
            "x-enum-varnames": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ]
        },
        "v1.PersistentVolumeClaimSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "dataSource": {
                    "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "dataSourceRef": {
                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedObjectReference"
                        }
                    ]
                },
                "resources": {
                    "description": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "selector": {
                    "description": "selector is a label query over volumes to consider for binding.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "storageClassName": {
                    "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeMode"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PersistentVolumeMode": {
            "type": "string",
            "enum": [
                "Block",
                "Filesystem"
            ],
            "x-enum-varnames": [
                "PersistentVolumeBlock",
                "PersistentVolumeFilesystem"
            ]
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PortStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is to record the problem with the service port\nThe format of the error shall comply with the following rules:\n- built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase.\n---\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\n+optional\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`\n+kubebuilder:validation:MaxLength=316",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port number of the service port of which status is recorded here",
                    "type": "integer"
                },
                "protocol": {
                    "description": "Protocol is the protocol of the service port of which status is recorded here\nThe supported values are: \"TCP\", \"UDP\", \"SCTP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GRPCAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ProcMountType": {
            "type": "string",
            "enum": [
                "Default",
                "Unmasked"
            ],
            "x-enum-varnames": [
                "DefaultProcMount",
                "UnmaskedProcMount"
            ]
        },
        "v1.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "v1.PullPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "Never",
                "IfNotPresent"
            ],
            "x-enum-varnames": [
                "PullAlways",
                "PullNever",
                "PullIfNotPresent"
            ]
        },
        "v1.ResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                }
            }
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.ResourceName": {
            "type": "string",
            "enum": [
                "cpu",
                "memory",
                "storage",
                "ephemeral-storage",
                "pods",
                "services",
                "replicationcontrollers",
                "resourcequotas",
                "secrets",
                "configmaps",
                "persistentvolumeclaims",
                "services.nodeports",
                "services.loadbalancers",
                "requests.cpu",
                "requests.memory",
                "requests.storage",
                "requests.ephemeral-storage",
                "limits.cpu",
                "limits.memory",
                "limits.ephemeral-storage"
            ],
            "x-enum-varnames": [
                "ResourceCPU",
                "ResourceMemory",
                "ResourceStorage",
                "ResourceEphemeralStorage",
                "ResourcePods",
                "ResourceServices",
                "ResourceReplicationControllers",
                "ResourceQuotas",
                "ResourceSecrets",
                "ResourceConfigMaps",
                "ResourcePersistentVolumeClaims",
                "ResourceServicesNodePorts",
                "ResourceServicesLoadBalancers",
                "ResourceRequestsCPU",
                "ResourceRequestsMemory",
                "ResourceRequestsStorage",
                "ResourceRequestsEphemeralStorage",
                "ResourceLimitsCPU",
                "ResourceLimitsMemory",
                "ResourceLimitsEphemeralStorage"
            ]
        },
        "v1.ResourceRequirements": {
            "type": "object",
            "properties": {
                "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ResourceClaim"
                    }
                },
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.ResourceResizeRestartPolicy": {
            "type": "string",
            "enum": [
                "NotRequired",
                "RestartContainer"
            ],
            "x-enum-varnames": [
                "NotRequired",
                "RestartContainer"
            ]
        },
        "v1.SELinuxOptions": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.\n+optional",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SeccompProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust only be set if type is \"Localhost\".\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfileType"
                        }
                    ]
                }
            }
        },
        "v1.SeccompProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "SeccompProfileTypeUnconfined",
                "SeccompProfileTypeRuntimeDefault",
                "SeccompProfileTypeLocalhost"
            ]
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecurityContext": {
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Capabilities"
                        }
                    ]
                },
                "privileged": {
                    "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProcMountType"
                        }
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.ServiceAccountTokenProjection": {
            "type": "object",
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                    "type": "string"
                }
            }
        },
        "v1.ServiceAffinity": {
            "type": "string",
            "enum": [
                "ClientIP",
                "None"
            ],
            "x-enum-varnames": [
                "ServiceAffinityClientIP",
                "ServiceAffinityNone"
            ]
        },
        "v1.ServiceExternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local",
                "Local",
                "Cluster"
            ],
            "x-enum-varnames": [
                "ServiceExternalTrafficPolicyCluster",
                "ServiceExternalTrafficPolicyLocal",
                "ServiceExternalTrafficPolicyTypeLocal",
                "ServiceExternalTrafficPolicyTypeCluster"
            ]
        },
        "v1.ServiceInternalTrafficPolicy": {
            "type": "string",
            "enum": [
                "Cluster",
                "Local"
            ],
            "x-enum-varnames": [
                "ServiceInternalTrafficPolicyCluster",
                "ServiceInternalTrafficPolicyLocal"
            ]
        },
        "v1.ServicePort": {
            "type": "object",
            "properties": {
                "appProtocol": {
                    "description": "The application protocol for this port.\nThis field follows standard Kubernetes label syntax.\nUn-prefixed names are reserved for IANA standard service names (as per\nRFC-6335 and https://www.iana.org/assignments/service-names).\nNon-standard protocols should use prefixed names such as\nmycompany.com/my-custom-protocol.\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.\n+optional",
                    "type": "string"
                },
                "nodePort": {
                    "description": "The port on each node on which this service is exposed when type is\nNodePort or LoadBalancer.  Usually assigned by the system. If a value is\nspecified, in-range, and not in use it will be used, otherwise the\noperation will fail.  If not specified, a port will be allocated if this\nService requires one.  If this field is specified when creating a\nService which does not need it, creation will fail. This field will be\nwiped when updating a Service to no longer need it (e.g. changing type\nfrom NodePort to ClusterIP).\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
                    "type": "integer"
                },
                "port": {
                    "description": "The port that will be exposed by this service.",
                    "type": "integer"
                },
                "protocol": {
                    "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.\n+default=\"TCP\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                },
                "targetPort": {
                    "description": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.ServiceSpec": {
            "type": "object",
            "properties": {
                "allocateLoadBalancerNodePorts": {
                    "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically\nallocated for services with type LoadBalancer.  Default is \"true\". It\nmay be set to \"false\" if the cluster load-balancer does not rely on\nNodePorts.  If the caller requests specific NodePorts (by specifying a\nvalue), those requests will be respected, regardless of this field.\nThis field may only be set for services with type LoadBalancer and will\nbe cleared if the type is changed to any other type.\n+optional",
                    "type": "boolean"
                },
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned\nrandomly. If an address is specified manually, is in-range (as per\nsystem configuration), and is not in use, it will be allocated to the\nservice; otherwise creation of the service will fail. This field may not\nbe changed through updates unless the type field is also being changed\nto ExternalName (which requires this field to be blank) or the type\nfield is being changed from ExternalName (in which case this field may\noptionally be specified, as describe above).  Valid values are \"None\",\nempty string (\"\"), or a valid IP address. Setting this to \"None\" makes a\n\"headless service\" (no virtual IP), which is useful when direct endpoint\nconnections are preferred and proxying is not required.  Only applies to\ntypes ClusterIP, NodePort, and LoadBalancer. If this field is specified\nwhen creating a Service of type ExternalName, creation will fail. This\nfield will be wiped when updating a Service to type ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "type": "string"
                },
                "clusterIPs": {
                    "description": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.  If an address is specified manually, is\nin-range (as per system configuration), and is not in use, it will be\nallocated to the service; otherwise creation of the service will fail.\nThis field may not be changed through updates unless the type field is\nalso being changed to ExternalName (which requires this field to be\nempty) or the type field is being changed from ExternalName (in which\ncase this field may optionally be specified, as describe above).  Valid\nvalues are \"None\", empty string (\"\"), or a valid IP address.  Setting\nthis to \"None\" makes a \"headless service\" (no virtual IP), which is\nuseful when direct endpoint connections are preferred and proxying is\nnot required.  Only applies to types ClusterIP, NodePort, and\nLoadBalancer. If this field is specified when creating a Service of type\nExternalName, creation will fail. This field will be wiped when updating\na Service to type ExternalName.  If this field is not specified, it will\nbe initialized from the clusterIP field.  If this field is specified,\nclients must ensure that clusterIPs[0] and clusterIP have the same\nvalue.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order).\nThese IPs must correspond to the values of the ipFamilies field. Both\nclusterIPs and ipFamilies are governed by the ipFamilyPolicy field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalIPs": {
                    "description": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalName": {
                    "description": "externalName is the external reference that discovery mechanisms will\nreturn as an alias for this service (e.g. a DNS CNAME record). No\nproxying will be involved.  Must be a lowercase RFC-1123 hostname\n(https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".\n+optional",
                    "type": "string"
                },
                "externalTrafficPolicy": {
                    "description": "externalTrafficPolicy describes how nodes distribute service traffic they\nreceive on one of the Service's \"externally-facing\" addresses (NodePorts,\nExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure\nthe service in a way that assumes that external load balancers will take care\nof balancing the service traffic between nodes, and so each node will deliver\ntraffic only to the node-local endpoints of the service, without masquerading\nthe client source IP. (Traffic mistakenly sent to a node with no endpoints will\nbe dropped.) The default value, \"Cluster\", uses the standard behavior of\nrouting to all endpoints evenly (possibly modified by topology and other\nfeatures). Note that traffic sent to an External IP or LoadBalancer IP from\nwithin the cluster will always get \"Cluster\" semantics, but clients sending to\na NodePort from within the cluster may need to take traffic policy into account\nwhen picking a node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceExternalTrafficPolicy"
                        }
                    ]
                },
                "healthCheckNodePort": {
                    "description": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nThis only applies when type is set to LoadBalancer and\nexternalTrafficPolicy is set to Local. If a value is specified, is\nin-range, and is not in use, it will be used.  If not specified, a value\nwill be automatically allocated.  External systems (e.g. load-balancers)\ncan use this port to determine if a given node holds endpoints for this\nservice or not.  If this field is specified when creating a Service\nwhich does not need it, creation will fail. This field will be wiped\nwhen updating a Service to no longer need it (e.g. changing type).\nThis field cannot be updated once set.\n+optional",
                    "type": "integer"
                },
                "internalTrafficPolicy": {
                    "description": "InternalTrafficPolicy describes how nodes distribute service traffic they\nreceive on the ClusterIP. If set to \"Local\", the proxy will assume that pods\nonly want to talk to endpoints of the service on the same node as the pod,\ndropping the traffic if there are no local endpoints. The default value,\n\"Cluster\", uses the standard behavior of routing to all endpoints evenly\n(possibly modified by topology and other features).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceInternalTrafficPolicy"
                        }
                    ]
                },
                "ipFamilies": {
                    "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice. This field is usually assigned automatically based on cluster\nconfiguration and the ipFamilyPolicy field. If this field is specified\nmanually, the requested family is available in the cluster,\nand ipFamilyPolicy allows it, it will be used; otherwise creation of\nthe service will fail. This field is conditionally mutable: it allows\nfor adding or removing a secondary IP family, but it does not allow\nchanging the primary IP family of the Service. Valid values are \"IPv4\"\nand \"IPv6\".  This field only applies to Services of types ClusterIP,\nNodePort, and LoadBalancer, and does apply to \"headless\" services.\nThis field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in\neither order).  These families must correspond to the values of the\nclusterIPs field, if specified. Both clusterIPs and ipFamilies are\ngoverned by the ipFamilyPolicy field.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IPFamily"
                    }
                },
                "ipFamilyPolicy": {
                    "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by\nthis Service. If there is no value provided, then this field will be set\nto SingleStack. Services can be \"SingleStack\" (a single IP family),\n\"PreferDualStack\" (two IP families on dual-stack configured clusters or\na single IP family on single-stack clusters), or \"RequireDualStack\"\n(two IP families on dual-stack configured clusters, otherwise fail). The\nipFamilies and clusterIPs fields depend on the value of this field. This\nfield will be wiped when updating a service to type ExternalName.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.IPFamilyPolicy"
                        }
                    ]
                },
                "loadBalancerClass": {
                    "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to.\nIf specified, the value of this field must be a label-style identifier, with an optional prefix,\ne.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users.\nThis field can only be set when the Service type is 'LoadBalancer'. If not set, the default load\nbalancer implementation is used, today this is typically done through the cloud provider integration,\nbut should apply for any default implementation. If set, it is assumed that a load balancer\nimplementation is watching for Services with a matching class. Any default load balancer\nimplementation (e.g. cloud providers) should ignore Services that set this field.\nThis field can only be set when creating or updating a Service to type 'LoadBalancer'.\nOnce set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.\n+optional",
                    "type": "string"
                },
                "loadBalancerIP": {
                    "description": "Only applies to Service Type: LoadBalancer.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\nDeprecated: This field was under-specified and its meaning varies across implementations,\nand it cannot support dual-stack.\nAs of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available.\nThis field may be removed in a future API version.\n+optional",
                    "type": "string"
                },
                "loadBalancerSourceRanges": {
                    "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+patchMergeKey=port\n+patchStrategy=merge\n+listType=map\n+listMapKey=port\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ServicePort"
                    }
                },
                "publishNotReadyAddresses": {
                    "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this\nService should disregard any indications of ready/not-ready.\nThe primary use case for setting this field is for a StatefulSet's Headless Service to\npropagate SRV DNS records for its Pods for the purpose of peer discovery.\nThe Kubernetes controllers that generate Endpoints and EndpointSlice resources for\nServices interpret this to mean that all endpoints are considered \"ready\" even if the\nPods themselves are not. Agents which consume only Kubernetes generated endpoints\nthrough the Endpoints or EndpointSlice resources can safely assume this behavior.\n+optional",
                    "type": "boolean"
                },
                "selector": {
                    "description": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\n+optional\n+mapType=atomic",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sessionAffinity": {
                    "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAffinity"
                        }
                    ]
                },
                "sessionAffinityConfig": {
                    "description": "sessionAffinityConfig contains the configurations of session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SessionAffinityConfig"
                        }
                    ]
                },
                "type": {
                    "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing\nto endpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object or\nEndpointSlice objects. If clusterIP is \"None\", no virtual IP is\nallocated and the endpoints are published as a set of endpoints rather\nthan a virtual IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the same endpoints as the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an external load-balancer\n(if supported in the current cloud) which routes to the same endpoints\nas the clusterIP.\n\"ExternalName\" aliases this service to the specified externalName.\nSeveral other fields do not apply to ExternalName services.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceType"
                        }
                    ]
                }
            }
        },
        "v1.ServiceStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Current service state\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Condition"
                    }
                },
                "loadBalancer": {
                    "description": "LoadBalancer contains the current status of the load-balancer,\nif one is present.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LoadBalancerStatus"
                        }
                    ]
                }
            }
        },
        "v1.ServiceType": {
            "type": "string",
            "enum": [
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
            ],
            "x-enum-varnames": [
                "ServiceTypeClusterIP",
                "ServiceTypeNodePort",
                "ServiceTypeLoadBalancer",
                "ServiceTypeExternalName"
            ]
        },
        "v1.SessionAffinityConfig": {
            "type": "object",
            "properties": {
                "clientIP": {
                    "description": "clientIP contains the configurations of Client IP based session affinity.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClientIPConfig"
                        }
                    ]
                }
            }
        },
        "v1.TCPSocketAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.TaintEffect": {
            "type": "string",
            "enum": [
                "NoSchedule",
                "PreferNoSchedule",
                "NoExecute"
            ],
            "x-enum-varnames": [
                "TaintEffectNoSchedule",
                "TaintEffectPreferNoSchedule",
                "TaintEffectNoExecute"
            ]
        },
        "v1.TerminationMessagePolicy": {
            "type": "string",
            "enum": [
                "File",
                "FallbackToLogsOnError"
            ],
            "x-enum-varnames": [
                "TerminationMessageReadFile",
                "TerminationMessageFallbackToLogsOnError"
            ]
        },
        "v1.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TolerationOperator"
                        }
                    ]
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
                    "type": "integer"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TolerationOperator": {
            "type": "string",
            "enum": [
                "Exists",
                "Equal"
            ],
            "x-enum-varnames": [
                "TolerationOpExists",
                "TolerationOpEqual"
            ]
        },
        "v1.TopologySpreadConstraint": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                    "type": "integer"
                },
                "minDomains": {
                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).\n+optional",
                    "type": "integer"
                },
                "nodeAffinityPolicy": {
                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "nodeTaintsPolicy": {
                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                    "type": "string"
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.UnsatisfiableConstraintAction"
                        }
                    ]
                }
            }
        },
        "v1.TypedLocalObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            }
        },
        "v1.TypedObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+featureGate=CrossNamespaceVolumeDataSource\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.URIScheme": {
            "type": "string",
            "enum": [
                "HTTP",
                "HTTPS"
            ],
            "x-enum-varnames": [
                "URISchemeHTTP",
                "URISchemeHTTPS"
            ]
        },
        "v1.UnsatisfiableConstraintAction": {
            "type": "string",
            "enum": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ],
            "x-enum-varnames": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ]
        },
        "v1.VolumeDevice": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMount": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MountPropagationMode"
                        }
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.VolumeProjection": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "configMap information about the configMap data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapProjection"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI information about the downwardAPI data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIProjection"
                        }
                    ]
                },
                "secret": {
                    "description": "secret information about the secret data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "serviceAccountToken": {
                    "description": "serviceAccountToken is information about the serviceAccountToken data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
                        }
                    ]
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinityTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WindowsSecurityContextOptions": {
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nThis field is alpha-level and will only be honored by components that enable the\nWindowsHostProcessContainers feature flag. Setting this field without the feature\nflag will result in errors when validating the Pod. All of a Pod's containers must\nhave the same effective HostProcess value (it is not allowed to have a mix of HostProcess\ncontainers and non-HostProcess containers).  In addition, if HostProcess is true\nthen HostNetwork must also be set to true.\n+optional",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.BackupJobs": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of pgBackRest backup Job pods.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBackRest backup Job pods.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "resources": {
                    "description": "Resource limits for backup jobs. Includes manual, scheduled and replica\ncreate backups\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of pgBackRest backup Job pods.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "ttlSecondsAfterFinished": {
                    "description": "Limit the lifetime of a Job that has finished.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/job\n+optional\n+kubebuilder:validation:Minimum=60",
                    "type": "integer"
                }
            }
        },
        "v1beta1.Backups": {
            "type": "object",
            "properties": {
                "pgbackrest": {
                    "description": "pgBackRest archive configuration\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestArchive"
                        }
                    ]
                }
            }
        },
        "v1beta1.DataSource": {
            "type": "object",
            "properties": {
                "pgbackrest": {
                    "description": "Defines a pgBackRest cloud-based data source that can be used to pre-populate the\nthe PostgreSQL data directory for a new PostgreSQL cluster using a pgBackRest restore.\nThe PGBackRest field is incompatible with the PostgresCluster field: only one\ndata source can be used for pre-populating a new PostgreSQL cluster\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestDataSource"
                        }
                    ]
                },
                "postgresCluster": {
                    "description": "Defines a pgBackRest data source that can be used to pre-populate the PostgreSQL data\ndirectory for a new PostgreSQL cluster using a pgBackRest restore.\nThe PGBackRest field is incompatible with the PostgresCluster field: only one\ndata source can be used for pre-populating a new PostgreSQL cluster\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresClusterDataSource"
                        }
                    ]
                },
                "volumes": {
                    "description": "Defines any existing volumes to reuse for this PostgresCluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DataSourceVolumes"
                        }
                    ]
                }
            }
        },
        "v1beta1.DataSourceVolume": {
            "type": "object",
            "properties": {
                "directory": {
                    "description": "The existing directory. When not set, a move Job is not created for the\nassociated volume.\n+optional",
                    "type": "string"
                },
                "pvcName": {
                    "description": "The existing PVC name.",
                    "type": "string"
                }
            }
        },
        "v1beta1.DataSourceVolumes": {
            "type": "object",
            "properties": {
                "pgBackRestVolume": {
                    "description": "Defines the existing pgBackRest repo volume and directory to use in the\ncurrent PostgresCluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DataSourceVolume"
                        }
                    ]
                },
                "pgDataVolume": {
                    "description": "Defines the existing pgData volume and directory to use in the current\nPostgresCluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DataSourceVolume"
                        }
                    ]
                },
                "pgWALVolume": {
                    "description": "Defines the existing pg_wal volume and directory to use in the current\nPostgresCluster. Note that a defined pg_wal volume MUST be accompanied by\na pgData volume.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DataSourceVolume"
                        }
                    ]
                }
            }
        },
        "v1beta1.DatabaseInitSQL": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is the ConfigMap data key that points to a SQL string\n+required",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of a ConfigMap\n+required",
                    "type": "string"
                }
            }
        },
        "v1beta1.ExporterSpec": {
            "type": "object",
            "properties": {
                "configuration": {
                    "description": "Projected volumes containing custom PostgreSQL Exporter configuration.  Currently supports\nthe customization of PostgreSQL Exporter queries. If a \"queries.yml\" file is detected in\nany volume projected using this field, it will be loaded using the \"extend.query-path\" flag:\nhttps://github.com/prometheus-community/postgres_exporter#flags\nChanging the values of field causes PostgreSQL and the exporter to restart.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                },
                "customTLSSecret": {
                    "description": "Projected secret containing custom TLS certificates to encrypt output from the exporter\nweb server\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "image": {
                    "description": "The image name to use for crunchy-postgres-exporter containers. The image may\nalso be set using the RELATED_IMAGE_PGEXPORTER environment variable.\n+optional",
                    "type": "string"
                },
                "resources": {
                    "description": "Changing this value causes PostgreSQL and the exporter to restart.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                }
            }
        },
        "v1beta1.InstanceSidecars": {
            "type": "object",
            "properties": {
                "replicaCertCopy": {
                    "description": "Defines the configuration for the replica cert copy sidecar container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_crunchydata_postgres-operator_pkg_apis_postgres-operator_crunchydata_com_v1beta1.Sidecar"
                        }
                    ]
                }
            }
        },
        "v1beta1.Metadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1beta1.MonitoringSpec": {
            "type": "object",
            "properties": {
                "pgmonitor": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGMonitorSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.MonitoringStatus": {
            "type": "object",
            "properties": {
                "exporterConfiguration": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.PGAdminConfiguration": {
            "type": "object",
            "properties": {
                "files": {
                    "description": "Files allows the user to mount projected volumes into the pgAdmin\ncontainer so that files can be referenced by pgAdmin as needed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                },
                "ldapBindPassword": {
                    "description": "A Secret containing the value for the LDAP_BIND_PASSWORD setting.\nMore info: https://www.pgadmin.org/docs/pgadmin4/latest/ldap.html\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                },
                "settings": {
                    "description": "Settings for the pgAdmin server process. Keys should be uppercase and\nvalues must be constants.\nMore info: https://www.pgadmin.org/docs/pgadmin4/latest/config_py.html\n+optional\n+kubebuilder:pruning:PreserveUnknownFields\n+kubebuilder:validation:Schemaless\n+kubebuilder:validation:Type=object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.SchemalessObject"
                        }
                    ]
                }
            }
        },
        "v1beta1.PGAdminPodSpec": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of a pgAdmin pod. Changing this value causes\npgAdmin to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "config": {
                    "description": "Configuration settings for the pgAdmin process. Changes to any of these\nvalues will be loaded without validation. Be careful, as\nyou may put pgAdmin into an unusable state.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGAdminConfiguration"
                        }
                    ]
                },
                "dataVolumeClaimSpec": {
                    "description": "Defines a PersistentVolumeClaim for pgAdmin data.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                },
                "image": {
                    "description": "Name of a container image that can run pgAdmin 4. Changing this value causes\npgAdmin to restart. The image may also be set using the RELATED_IMAGE_PGADMIN\nenvironment variable.\nMore info: https://kubernetes.io/docs/concepts/containers/images\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgAdmin pod. Changing this value causes pgAdmin\nto restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "replicas": {
                    "description": "Number of desired pgAdmin pods.\n+optional\n+kubebuilder:default=1\n+kubebuilder:validation:Minimum=0\n+kubebuilder:validation:Maximum=1",
                    "type": "integer"
                },
                "resources": {
                    "description": "Compute resources of a pgAdmin container. Changing this value causes\npgAdmin to restart.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "service": {
                    "description": "Specification of the service that exposes pgAdmin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ServiceSpec"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of a pgAdmin pod. Changing this value causes pgAdmin to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Topology spread constraints of a pgAdmin pod. Changing this value causes\npgAdmin to restart.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                }
            }
        },
        "v1beta1.PGAdminPodStatus": {
            "type": "object",
            "properties": {
                "usersRevision": {
                    "description": "Hash that indicates which users have been installed into pgAdmin.",
                    "type": "string"
                }
            }
        },
        "v1beta1.PGBackRestArchive": {
            "type": "object",
            "properties": {
                "configuration": {
                    "description": "Projected volumes containing custom pgBackRest configuration.  These files are mounted\nunder \"/etc/pgbackrest/conf.d\" alongside any pgBackRest configuration generated by the\nPostgreSQL Operator:\nhttps://pgbackrest.org/configuration.html\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                },
                "global": {
                    "description": "Global pgBackRest configuration settings.  These settings are included in the \"global\"\nsection of the pgBackRest configuration generated by the PostgreSQL Operator, and then\nmounted under \"/etc/pgbackrest/conf.d\":\nhttps://pgbackrest.org/configuration.html\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "description": "The image name to use for pgBackRest containers.  Utilized to run\npgBackRest repository hosts and backups. The image may also be set using\nthe RELATED_IMAGE_PGBACKREST environment variable\n+optional",
                    "type": "string"
                },
                "jobs": {
                    "description": "Jobs field allows configuration for all backup jobs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.BackupJobs"
                        }
                    ]
                },
                "manual": {
                    "description": "Defines details for manual pgBackRest backup Jobs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestManualBackup"
                        }
                    ]
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "repoHost": {
                    "description": "Defines configuration for a pgBackRest dedicated repository host.  This section is only\napplicable if at least one \"volume\" (i.e. PVC-based) repository is defined in the \"repos\"\nsection, therefore enabling a dedicated repository host Deployment.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestRepoHost"
                        }
                    ]
                },
                "repos": {
                    "description": "Defines a pgBackRest repository\n+kubebuilder:validation:MinItems=1\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PGBackRestRepo"
                    }
                },
                "restore": {
                    "description": "Defines details for performing an in-place restore using pgBackRest\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestRestore"
                        }
                    ]
                },
                "sidecars": {
                    "description": "Configuration for pgBackRest sidecar containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestSidecars"
                        }
                    ]
                }
            }
        },
        "v1beta1.PGBackRestBackupSchedules": {
            "type": "object",
            "properties": {
                "differential": {
                    "description": "Defines the Cron schedule for a differential pgBackRest backup.\nFollows the standard Cron schedule syntax:\nhttps://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax\n+optional\n+kubebuilder:validation:MinLength=6",
                    "type": "string"
                },
                "full": {
                    "description": "Defines the Cron schedule for a full pgBackRest backup.\nFollows the standard Cron schedule syntax:\nhttps://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax\n+optional\n+kubebuilder:validation:MinLength=6",
                    "type": "string"
                },
                "incremental": {
                    "description": "Defines the Cron schedule for an incremental pgBackRest backup.\nFollows the standard Cron schedule syntax:\nhttps://k8s.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax\n+optional\n+kubebuilder:validation:MinLength=6",
                    "type": "string"
                }
            }
        },
        "v1beta1.PGBackRestDataSource": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "configuration": {
                    "description": "Projected volumes containing custom pgBackRest configuration.  These files are mounted\nunder \"/etc/pgbackrest/conf.d\" alongside any pgBackRest configuration generated by the\nPostgreSQL Operator:\nhttps://pgbackrest.org/configuration.html\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                },
                "global": {
                    "description": "Global pgBackRest configuration settings.  These settings are included in the \"global\"\nsection of the pgBackRest configuration generated by the PostgreSQL Operator, and then\nmounted under \"/etc/pgbackrest/conf.d\":\nhttps://pgbackrest.org/configuration.html\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "description": "Command line options to include when running the pgBackRest restore command.\nhttps://pgbackrest.org/command.html#command-restore\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBackRest restore Job pod. Changing this\nvalue causes PostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "repo": {
                    "description": "Defines a pgBackRest repository\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestRepo"
                        }
                    ]
                },
                "resources": {
                    "description": "Resource requirements for the pgBackRest restore Job.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "stanza": {
                    "description": "The name of an existing pgBackRest stanza to use as the data source for the new PostgresCluster.\nDefaults to `db` if not provided.\n+kubebuilder:default=\"db\"",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Tolerations of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                }
            }
        },
        "v1beta1.PGBackRestJobStatus": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "The number of actively running manual backup Pods.\n+optional",
                    "type": "integer"
                },
                "completionTime": {
                    "description": "Represents the time the manual backup Job was determined by the Job controller\nto be completed.  This field is only set if the backup completed successfully.\nAdditionally, it is represented in RFC3339 form and is in UTC.\n+optional",
                    "type": "string"
                },
                "failed": {
                    "description": "The number of Pods for the manual backup Job that reached the \"Failed\" phase.\n+optional",
                    "type": "integer"
                },
                "finished": {
                    "description": "Specifies whether or not the Job is finished executing (does not indicate success or\nfailure).\n+kubebuilder:validation:Required",
                    "type": "boolean"
                },
                "id": {
                    "description": "A unique identifier for the manual backup as provided using the \"pgbackrest-backup\"\nannotation when initiating a backup.\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "startTime": {
                    "description": "Represents the time the manual backup Job was acknowledged by the Job controller.\nIt is represented in RFC3339 form and is in UTC.\n+optional",
                    "type": "string"
                },
                "succeeded": {
                    "description": "The number of Pods for the manual backup Job that reached the \"Succeeded\" phase.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1beta1.PGBackRestManualBackup": {
            "type": "object",
            "properties": {
                "options": {
                    "description": "Command line options to include when running the pgBackRest backup command.\nhttps://pgbackrest.org/command.html#command-backup\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repoName": {
                    "description": "The name of the pgBackRest repo to run the backup command against.\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=^repo[1-4]",
                    "type": "string"
                }
            }
        },
        "v1beta1.PGBackRestRepo": {
            "type": "object",
            "properties": {
                "azure": {
                    "description": "Represents a pgBackRest repository that is created using Azure storage\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.RepoAzure"
                        }
                    ]
                },
                "gcs": {
                    "description": "Represents a pgBackRest repository that is created using Google Cloud Storage\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.RepoGCS"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the the repository\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=^repo[1-4]",
                    "type": "string"
                },
                "s3": {
                    "description": "RepoS3 represents a pgBackRest repository that is created using AWS S3 (or S3-compatible)\nstorage\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.RepoS3"
                        }
                    ]
                },
                "schedules": {
                    "description": "Defines the schedules for the pgBackRest backups\nFull, Differential and Incremental backup types are supported:\nhttps://pgbackrest.org/user-guide.html#concept/backup\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestBackupSchedules"
                        }
                    ]
                },
                "volume": {
                    "description": "Represents a pgBackRest repository that is created using a PersistentVolumeClaim\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.RepoPVC"
                        }
                    ]
                }
            }
        },
        "v1beta1.PGBackRestRepoHost": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of the Dedicated repo host pod.\nChanging this value causes repo host to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBackRest repo host pod. Changing this value\ncauses PostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "resources": {
                    "description": "Resource requirements for a pgBackRest repository host\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "sshConfigMap": {
                    "description": "ConfigMap containing custom SSH configuration.\nDeprecated: Repository hosts use mTLS for encryption, authentication, and authorization.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapProjection"
                        }
                    ]
                },
                "sshSecret": {
                    "description": "Secret containing custom SSH keys.\nDeprecated: Repository hosts use mTLS for encryption, authentication, and authorization.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of a PgBackRest repo host pod. Changing this value causes a restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Topology spread constraints of a Dedicated repo host pod. Changing this\nvalue causes the repo host to restart.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                }
            }
        },
        "v1beta1.PGBackRestRestore": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "clusterName": {
                    "description": "The name of an existing PostgresCluster to use as the data source for the new PostgresCluster.\nDefaults to the name of the PostgresCluster being created if not provided.\n+optional",
                    "type": "string"
                },
                "clusterNamespace": {
                    "description": "The namespace of the cluster specified as the data source using the clusterName field.\nDefaults to the namespace of the PostgresCluster being created if not provided.\n+optional",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether or not in-place pgBackRest restores are enabled for this PostgresCluster.\n+kubebuilder:default=false",
                    "type": "boolean"
                },
                "options": {
                    "description": "Command line options to include when running the pgBackRest restore command.\nhttps://pgbackrest.org/command.html#command-restore\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBackRest restore Job pod. Changing this\nvalue causes PostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "repoName": {
                    "description": "The name of the pgBackRest repo within the source PostgresCluster that contains the backups\nthat should be utilized to perform a pgBackRest restore when initializing the data source\nfor the new PostgresCluster.\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=^repo[1-4]",
                    "type": "string"
                },
                "resources": {
                    "description": "Resource requirements for the pgBackRest restore Job.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                }
            }
        },
        "v1beta1.PGBackRestScheduledBackupStatus": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "The number of actively running manual backup Pods.\n+optional",
                    "type": "integer"
                },
                "completionTime": {
                    "description": "Represents the time the manual backup Job was determined by the Job controller\nto be completed.  This field is only set if the backup completed successfully.\nAdditionally, it is represented in RFC3339 form and is in UTC.\n+optional",
                    "type": "string"
                },
                "cronJobName": {
                    "description": "The name of the associated pgBackRest scheduled backup CronJob\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "failed": {
                    "description": "The number of Pods for the manual backup Job that reached the \"Failed\" phase.\n+optional",
                    "type": "integer"
                },
                "repo": {
                    "description": "The name of the associated pgBackRest repository\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "startTime": {
                    "description": "Represents the time the manual backup Job was acknowledged by the Job controller.\nIt is represented in RFC3339 form and is in UTC.\n+optional",
                    "type": "string"
                },
                "succeeded": {
                    "description": "The number of Pods for the manual backup Job that reached the \"Succeeded\" phase.\n+optional",
                    "type": "integer"
                },
                "type": {
                    "description": "The pgBackRest backup type for this Job\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1beta1.PGBackRestSidecars": {
            "type": "object",
            "properties": {
                "pgbackrest": {
                    "description": "Defines the configuration for the pgBackRest sidecar container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_crunchydata_postgres-operator_pkg_apis_postgres-operator_crunchydata_com_v1beta1.Sidecar"
                        }
                    ]
                },
                "pgbackrestConfig": {
                    "description": "Defines the configuration for the pgBackRest config sidecar container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_crunchydata_postgres-operator_pkg_apis_postgres-operator_crunchydata_com_v1beta1.Sidecar"
                        }
                    ]
                }
            }
        },
        "v1beta1.PGBackRestStatus": {
            "type": "object",
            "properties": {
                "manualBackup": {
                    "description": "Status information for manual backups\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestJobStatus"
                        }
                    ]
                },
                "repoHost": {
                    "description": "Status information for the pgBackRest dedicated repository host\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.RepoHostStatus"
                        }
                    ]
                },
                "repos": {
                    "description": "Status information for pgBackRest repositories\n+optional\n+listType=map\n+listMapKey=name",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.RepoStatus"
                    }
                },
                "restore": {
                    "description": "Status information for in-place restores\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestJobStatus"
                        }
                    ]
                },
                "scheduledBackups": {
                    "description": "Status information for scheduled backups\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PGBackRestScheduledBackupStatus"
                    }
                }
            }
        },
        "v1beta1.PGBouncerConfiguration": {
            "type": "object",
            "properties": {
                "databases": {
                    "description": "PgBouncer database definitions. The key is the database requested by a\nclient while the value is a libpq-styled connection string. The special\nkey \"*\" acts as a fallback. When this field is empty, PgBouncer is\nconfigured with a single \"*\" entry that connects to the primary\nPostgreSQL instance.\nMore info: https://www.pgbouncer.org/config.html#section-databases\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "files": {
                    "description": "Files to mount under \"/etc/pgbouncer\". When specified, settings in the\n\"pgbouncer.ini\" file are loaded before all others. From there, other\nfiles may be included by absolute path. Changing these references causes\nPgBouncer to restart, but changes to the file contents are automatically\nreloaded.\nMore info: https://www.pgbouncer.org/config.html#include-directive\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                },
                "global": {
                    "description": "Settings that apply to the entire PgBouncer process.\nMore info: https://www.pgbouncer.org/config.html\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "users": {
                    "description": "Connection settings specific to particular users.\nMore info: https://www.pgbouncer.org/config.html#section-users\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1beta1.PGBouncerPodSpec": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of a PgBouncer pod. Changing this value causes\nPgBouncer to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "config": {
                    "description": "Configuration settings for the PgBouncer process. Changes to any of these\nvalues will be automatically reloaded without validation. Be careful, as\nyou may put PgBouncer into an unusable state.\nMore info: https://www.pgbouncer.org/usage.html#reload\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBouncerConfiguration"
                        }
                    ]
                },
                "containers": {
                    "description": "Custom sidecars for a PgBouncer pod. Changing this value causes\nPgBouncer to restart.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "customTLSSecret": {
                    "description": "A secret projection containing a certificate and key with which to encrypt\nconnections to PgBouncer. The \"tls.crt\", \"tls.key\", and \"ca.crt\" paths must\nbe PEM-encoded certificates and keys. Changing this value causes PgBouncer\nto restart.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "image": {
                    "description": "Name of a container image that can run PgBouncer 1.15 or newer. Changing\nthis value causes PgBouncer to restart. The image may also be set using\nthe RELATED_IMAGE_PGBOUNCER environment variable.\nMore info: https://kubernetes.io/docs/concepts/containers/images\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "minAvailable": {
                    "description": "Minimum number of pods that should be available at a time.\nDefaults to one when the replicas field is greater than one.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "port": {
                    "description": "Port on which PgBouncer should listen for client connections. Changing\nthis value causes PgBouncer to restart.\n+optional\n+kubebuilder:default=5432\n+kubebuilder:validation:Minimum=1024",
                    "type": "integer"
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBouncer pod. Changing this value causes\nPostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "replicas": {
                    "description": "Number of desired PgBouncer pods.\n+optional\n+kubebuilder:default=1\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "resources": {
                    "description": "Compute resources of a PgBouncer container. Changing this value causes\nPgBouncer to restart.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "service": {
                    "description": "Specification of the service that exposes PgBouncer.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ServiceSpec"
                        }
                    ]
                },
                "sidecars": {
                    "description": "Configuration for pgBouncer sidecar containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBouncerSidecars"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of a PgBouncer pod. Changing this value causes PgBouncer to\nrestart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Topology spread constraints of a PgBouncer pod. Changing this value causes\nPgBouncer to restart.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                }
            }
        },
        "v1beta1.PGBouncerPodStatus": {
            "type": "object",
            "properties": {
                "postgresRevision": {
                    "description": "Identifies the revision of PgBouncer assets that have been installed into\nPostgreSQL.",
                    "type": "string"
                },
                "readyReplicas": {
                    "description": "Total number of ready pods.",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of non-terminated pods.",
                    "type": "integer"
                }
            }
        },
        "v1beta1.PGBouncerSidecars": {
            "type": "object",
            "properties": {
                "pgbouncerConfig": {
                    "description": "Defines the configuration for the pgBouncer config sidecar container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_crunchydata_postgres-operator_pkg_apis_postgres-operator_crunchydata_com_v1beta1.Sidecar"
                        }
                    ]
                }
            }
        },
        "v1beta1.PGMonitorSpec": {
            "type": "object",
            "properties": {
                "exporter": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ExporterSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.PatroniSpec": {
            "type": "object",
            "properties": {
                "dynamicConfiguration": {
                    "description": "Patroni dynamic configuration settings. Changes to this value will be\nautomatically reloaded without validation. Changes to certain PostgreSQL\nparameters cause PostgreSQL to restart.\nMore info: https://patroni.readthedocs.io/en/latest/SETTINGS.html\n+optional\n+kubebuilder:pruning:PreserveUnknownFields\n+kubebuilder:validation:Schemaless\n+kubebuilder:validation:Type=object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.SchemalessObject"
                        }
                    ]
                },
                "leaderLeaseDurationSeconds": {
                    "description": "TTL of the cluster leader lock. \"Think of it as the\nlength of time before initiation of the automatic failover process.\"\nChanging this value causes PostgreSQL to restart.\n+optional\n+kubebuilder:default=30\n+kubebuilder:validation:Minimum=3",
                    "type": "integer"
                },
                "port": {
                    "description": "The port on which Patroni should listen.\nChanging this value causes PostgreSQL to restart.\n+optional\n+kubebuilder:default=8008\n+kubebuilder:validation:Minimum=1024",
                    "type": "integer"
                },
                "switchover": {
                    "description": "Switchover gives options to perform ad hoc switchovers in a PostgresCluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PatroniSwitchover"
                        }
                    ]
                },
                "syncPeriodSeconds": {
                    "description": "The interval for refreshing the leader lock and applying\ndynamicConfiguration. Must be less than leaderLeaseDurationSeconds.\nChanging this value causes PostgreSQL to restart.\n+optional\n+kubebuilder:default=10\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                }
            }
        },
        "v1beta1.PatroniStatus": {
            "type": "object",
            "properties": {
                "switchover": {
                    "description": "Tracks the execution of the switchover requests.\n+optional",
                    "type": "string"
                },
                "switchoverTimeline": {
                    "description": "Tracks the current timeline during switchovers\n+optional",
                    "type": "integer"
                },
                "systemIdentifier": {
                    "description": "The PostgreSQL system identifier reported by Patroni.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.PatroniSwitchover": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Whether or not the operator should allow switchovers in a PostgresCluster\n+required",
                    "type": "boolean"
                },
                "targetInstance": {
                    "description": "The instance that should become primary during a switchover. This field is\noptional when Type is \"Switchover\" and required when Type is \"Failover\".\nWhen it is not specified, a healthy replica is automatically selected.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type of switchover to perform. Valid options are Switchover and Failover.\n\"Switchover\" changes the primary instance of a healthy PostgresCluster.\n\"Failover\" forces a particular instance to be primary, regardless of other\nfactors. A TargetInstance must be specified to failover.\nNOTE: The Failover type is reserved as the \"last resort\" case.\n+kubebuilder:validation:Enum={Switchover,Failover}\n+kubebuilder:default:=Switchover\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.PostgresAdditionalConfig": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                }
            }
        },
        "v1beta1.PostgresClusterDataSource": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "clusterName": {
                    "description": "The name of an existing PostgresCluster to use as the data source for the new PostgresCluster.\nDefaults to the name of the PostgresCluster being created if not provided.\n+optional",
                    "type": "string"
                },
                "clusterNamespace": {
                    "description": "The namespace of the cluster specified as the data source using the clusterName field.\nDefaults to the namespace of the PostgresCluster being created if not provided.\n+optional",
                    "type": "string"
                },
                "options": {
                    "description": "Command line options to include when running the pgBackRest restore command.\nhttps://pgbackrest.org/command.html#command-restore\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Priority class name for the pgBackRest restore Job pod. Changing this\nvalue causes PostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "repoName": {
                    "description": "The name of the pgBackRest repo within the source PostgresCluster that contains the backups\nthat should be utilized to perform a pgBackRest restore when initializing the data source\nfor the new PostgresCluster.\n+kubebuilder:validation:Required\n+kubebuilder:validation:Pattern=^repo[1-4]",
                    "type": "string"
                },
                "resources": {
                    "description": "Resource requirements for the pgBackRest restore Job.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "tolerations": {
                    "description": "Tolerations of the pgBackRest restore Job.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                }
            }
        },
        "v1beta1.PostgresClusterSpec": {
            "type": "object",
            "properties": {
                "backups": {
                    "description": "PostgreSQL backup configuration\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Backups"
                        }
                    ]
                },
                "config": {
                    "$ref": "#/definitions/v1beta1.PostgresAdditionalConfig"
                },
                "customReplicationTLSSecret": {
                    "description": "The secret containing the replication client certificates and keys for\nsecure connections to the PostgreSQL server. It will need to contain the\nclient TLS certificate, TLS key and the Certificate Authority certificate\nwith the data keys set to tls.crt, tls.key and ca.crt, respectively.\nNOTE: If CustomReplicationClientTLSSecret is provided, CustomTLSSecret\nMUST be provided and the ca.crt provided must be the same.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "customTLSSecret": {
                    "description": "The secret containing the Certificates and Keys to encrypt PostgreSQL\ntraffic will need to contain the server TLS certificate, TLS key and the\nCertificate Authority certificate with the data keys set to tls.crt,\ntls.key and ca.crt, respectively. It will then be mounted as a volume\nprojection to the '/pgconf/tls' directory. For more information on\nKubernetes secret projections, please see\nhttps://k8s.io/docs/concepts/configuration/secret/#projection-of-secret-keys-to-specific-paths\nNOTE: If CustomTLSSecret is provided, CustomReplicationClientTLSSecret\nMUST be provided and the ca.crt provided must be the same.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "dataSource": {
                    "description": "Specifies a data source for bootstrapping the PostgreSQL cluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DataSource"
                        }
                    ]
                },
                "databaseInitSQL": {
                    "description": "DatabaseInitSQL defines a ConfigMap containing custom SQL that will\nbe run after the cluster is initialized. This ConfigMap must be in the same\nnamespace as the cluster.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.DatabaseInitSQL"
                        }
                    ]
                },
                "disableDefaultPodScheduling": {
                    "description": "Whether or not the PostgreSQL cluster should use the defined default\nscheduling constraints. If the field is unset or false, the default\nscheduling constraints will be used in addition to any custom constraints\nprovided.\n+optional",
                    "type": "boolean"
                },
                "image": {
                    "description": "The image name to use for PostgreSQL containers. When omitted, the value\ncomes from an operator environment variable. For standard PostgreSQL images,\nthe format is RELATED_IMAGE_POSTGRES_{postgresVersion},\ne.g. RELATED_IMAGE_POSTGRES_13. For PostGIS enabled PostgreSQL images,\nthe format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},\ne.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.\n+optional\n+operator-sdk:csv:customresourcedefinitions:type=spec,order=1",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "ImagePullPolicy is used to determine when Kubernetes will attempt to\npull (download) container images.\nMore info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy\n+kubebuilder:validation:Enum={Always,Never,IfNotPresent}\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "imagePullSecrets": {
                    "description": "The image pull secrets used to pull from a private registry\nChanging this value causes all running pods to restart.\nhttps://k8s.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LocalObjectReference"
                    }
                },
                "instances": {
                    "description": "Specifies one or more sets of PostgreSQL pods that replicate data for\nthis cluster.\n+listType=map\n+listMapKey=name\n+kubebuilder:validation:MinItems=1\n+operator-sdk:csv:customresourcedefinitions:type=spec,order=2",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PostgresInstanceSetSpec"
                    }
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "monitoring": {
                    "description": "The specification of monitoring tools that connect to PostgreSQL\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.MonitoringSpec"
                        }
                    ]
                },
                "openshift": {
                    "description": "Whether or not the PostgreSQL cluster is being deployed to an OpenShift\nenvironment. If the field is unset, the operator will automatically\ndetect the environment.\n+optional",
                    "type": "boolean"
                },
                "patroni": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PatroniSpec"
                        }
                    ]
                },
                "paused": {
                    "description": "Suspends the rollout and reconciliation of changes made to the\nPostgresCluster spec.\n+optional",
                    "type": "boolean"
                },
                "port": {
                    "description": "The port on which PostgreSQL should listen.\n+optional\n+kubebuilder:default=5432\n+kubebuilder:validation:Minimum=1024",
                    "type": "integer"
                },
                "postGISVersion": {
                    "description": "The PostGIS extension version installed in the PostgreSQL image.\nWhen image is not set, indicates a PostGIS enabled image will be used.\n+optional",
                    "type": "string"
                },
                "postgresVersion": {
                    "description": "The major version of PostgreSQL installed in the PostgreSQL image\n+kubebuilder:validation:Required\n+kubebuilder:validation:Minimum=10\n+kubebuilder:validation:Maximum=15\n+operator-sdk:csv:customresourcedefinitions:type=spec,order=1",
                    "type": "integer"
                },
                "proxy": {
                    "description": "The specification of a proxy that connects to PostgreSQL.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresProxySpec"
                        }
                    ]
                },
                "service": {
                    "description": "Specification of the service that exposes the PostgreSQL primary instance.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.ServiceSpec"
                        }
                    ]
                },
                "shutdown": {
                    "description": "Whether or not the PostgreSQL cluster should be stopped.\nWhen this is true, workloads are scaled to zero and CronJobs\nare suspended.\nOther resources, such as Services and Volumes, remain in place.\n+optional",
                    "type": "boolean"
                },
                "standby": {
                    "description": "Run this cluster as a read-only copy of an existing cluster or archive.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresStandbySpec"
                        }
                    ]
                },
                "supplementalGroups": {
                    "description": "A list of group IDs applied to the process of a container. These can be\nuseful when accessing shared file systems with constrained permissions.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context\n+optional",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userInterface": {
                    "description": "The specification of a user interface that connects to PostgreSQL.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.UserInterfaceSpec"
                        }
                    ]
                },
                "users": {
                    "description": "Users to create inside PostgreSQL and the databases they should access.\nThe default creates one user that can access one database matching the\nPostgresCluster name. An empty list creates no users. Removing a user\nfrom this list does NOT drop the user nor revoke their access.\n+listType=map\n+listMapKey=name\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PostgresUserSpec"
                    }
                }
            }
        },
        "v1beta1.PostgresClusterStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "conditions represent the observations of postgrescluster's current state.\nKnown .status.conditions.type are: \"PersistentVolumeResizing\",\n\"Progressing\", \"ProxyAvailable\"\n+optional\n+listType=map\n+listMapKey=type\n+operator-sdk:csv:customresourcedefinitions:type=status,xDescriptors={\"urn:alm:descriptor:io.kubernetes.conditions\"}",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Condition"
                    }
                },
                "databaseInitSQL": {
                    "description": "DatabaseInitSQL state of custom database initialization in the cluster\n+optional",
                    "type": "string"
                },
                "databaseRevision": {
                    "description": "Identifies the databases that have been installed into PostgreSQL.",
                    "type": "string"
                },
                "instances": {
                    "description": "Current state of PostgreSQL instances.\n+listType=map\n+listMapKey=name\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.PostgresInstanceSetStatus"
                    }
                },
                "monitoring": {
                    "description": "Current state of PostgreSQL cluster monitoring tool configuration\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.MonitoringStatus"
                        }
                    ]
                },
                "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation on which the status was based.\n+optional\n+kubebuilder:validation:Minimum=0",
                    "type": "integer"
                },
                "patroni": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PatroniStatus"
                        }
                    ]
                },
                "pgbackrest": {
                    "description": "Status information for pgBackRest\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBackRestStatus"
                        }
                    ]
                },
                "postgresVersion": {
                    "description": "Stores the current PostgreSQL major version following a successful\nmajor PostgreSQL upgrade.\n+optional",
                    "type": "integer"
                },
                "proxy": {
                    "description": "Current state of the PostgreSQL proxy.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresProxyStatus"
                        }
                    ]
                },
                "startupInstance": {
                    "description": "The instance that should be started first when bootstrapping and/or starting a\nPostgresCluster.\n+optional",
                    "type": "string"
                },
                "startupInstanceSet": {
                    "description": "The instance set associated with the startupInstance\n+optional",
                    "type": "string"
                },
                "userInterface": {
                    "description": "Current state of the PostgreSQL user interface.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresUserInterfaceStatus"
                        }
                    ]
                },
                "usersRevision": {
                    "description": "Identifies the users that have been installed into PostgreSQL.",
                    "type": "string"
                }
            }
        },
        "v1beta1.PostgresInstanceSetSpec": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "Scheduling constraints of a PostgreSQL pod. Changing this value causes\nPostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "containers": {
                    "description": "Custom sidecars for PostgreSQL instance pods. Changing this value causes\nPostgreSQL to restart.\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Container"
                    }
                },
                "dataVolumeClaimSpec": {
                    "description": "Defines a PersistentVolumeClaim for PostgreSQL data.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "minAvailable": {
                    "description": "Minimum number of pods that should be available at a time.\nDefaults to one when the replicas field is greater than one.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "name": {
                    "description": "Name that associates this set of PostgreSQL pods. This field is optional\nwhen only one instance set is defined. Each instance set in a cluster\nmust have a unique name. The combined length of this and the cluster name\nmust be 46 characters or less.\n+optional\n+kubebuilder:default=\"\"\n+kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?)?$`",
                    "type": "string"
                },
                "priorityClassName": {
                    "description": "Priority class name for the PostgreSQL pod. Changing this value causes\nPostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/\n+optional",
                    "type": "string"
                },
                "replicas": {
                    "description": "Number of desired PostgreSQL pods.\n+optional\n+kubebuilder:default=1\n+kubebuilder:validation:Minimum=1",
                    "type": "integer"
                },
                "resources": {
                    "description": "Compute resources of a PostgreSQL container.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "sidecars": {
                    "description": "Configuration for instance sidecar containers\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.InstanceSidecars"
                        }
                    ]
                },
                "tablespaceVolumes": {
                    "description": "The list of tablespaces volumes to mount for this postgrescluster\nThis field requires enabling TablespaceVolumes feature gate\n+listType=map\n+listMapKey=name\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1beta1.TablespaceVolume"
                    }
                },
                "tolerations": {
                    "description": "Tolerations of a PostgreSQL pod. Changing this value causes PostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Topology spread constraints of a PostgreSQL pod. Changing this value causes\nPostgreSQL to restart.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                },
                "walVolumeClaimSpec": {
                    "description": "Defines a separate PersistentVolumeClaim for PostgreSQL's write-ahead log.\nMore info: https://www.postgresql.org/docs/current/wal.html\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.PostgresInstanceSetStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "readyReplicas": {
                    "description": "Total number of ready pods.\n+optional",
                    "type": "integer"
                },
                "replicas": {
                    "description": "Total number of pods.\n+optional",
                    "type": "integer"
                },
                "updatedReplicas": {
                    "description": "Total number of pods that have the desired specification.\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1beta1.PostgresPasswordSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type of password to generate. Defaults to ASCII. Valid options are ASCII\nand AlphaNumeric.\n\"ASCII\" passwords contain letters, numbers, and symbols from the US-ASCII character set.\n\"AlphaNumeric\" passwords contain letters and numbers from the US-ASCII character set.\n+kubebuilder:default=ASCII\n+kubebuilder:validation:Enum={ASCII,AlphaNumeric}",
                    "type": "string"
                }
            }
        },
        "v1beta1.PostgresProxySpec": {
            "type": "object",
            "properties": {
                "pgBouncer": {
                    "description": "Defines a PgBouncer proxy and connection pooler.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGBouncerPodSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.PostgresProxyStatus": {
            "type": "object",
            "properties": {
                "pgBouncer": {
                    "$ref": "#/definitions/v1beta1.PGBouncerPodStatus"
                }
            }
        },
        "v1beta1.PostgresStandbySpec": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Whether or not the PostgreSQL cluster should be read-only. When this is\ntrue, WAL files are applied from a pgBackRest repository or another\nPostgreSQL server.\n+optional\n+kubebuilder:default=true",
                    "type": "boolean"
                },
                "host": {
                    "description": "Network address of the PostgreSQL server to follow via streaming replication.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Network port of the PostgreSQL server to follow via streaming replication.\n+optional\n+kubebuilder:validation:Minimum=1024",
                    "type": "integer"
                },
                "repoName": {
                    "description": "The name of the pgBackRest repository to follow for WAL files.\n+optional\n+kubebuilder:validation:Pattern=^repo[1-4]",
                    "type": "string"
                }
            }
        },
        "v1beta1.PostgresUserInterfaceStatus": {
            "type": "object",
            "properties": {
                "pgAdmin": {
                    "description": "The state of the pgAdmin user interface.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGAdminPodStatus"
                        }
                    ]
                }
            }
        },
        "v1beta1.PostgresUserSpec": {
            "type": "object",
            "properties": {
                "databases": {
                    "description": "Databases to which this user can connect and create objects. Removing a\ndatabase from this list does NOT revoke access. This field is ignored for\nthe \"postgres\" user.\n+listType=set\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "The name of this PostgreSQL user. The value may contain only lowercase\nletters, numbers, and hyphen so that it fits into Kubernetes metadata.\n+kubebuilder:validation:Pattern=`^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`\n+kubebuilder:validation:Type=string",
                    "type": "string"
                },
                "options": {
                    "description": "ALTER ROLE options except for PASSWORD. This field is ignored for the\n\"postgres\" user.\nMore info: https://www.postgresql.org/docs/current/role-attributes.html\n+kubebuilder:validation:Pattern=`^[^;]*$`\n+optional",
                    "type": "string"
                },
                "password": {
                    "description": "Properties of the password generated for this user.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PostgresPasswordSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.RepoAzure": {
            "type": "object",
            "properties": {
                "container": {
                    "description": "The Azure container utilized for the repository\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1beta1.RepoGCS": {
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "The GCS bucket utilized for the repository\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1beta1.RepoHostStatus": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "ready": {
                    "description": "Whether or not the pgBackRest repository host is ready for use\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1beta1.RepoPVC": {
            "type": "object",
            "properties": {
                "volumeClaimSpec": {
                    "description": "Defines a PersistentVolumeClaim spec used to create and/or bind a volume\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                }
            }
        },
        "v1beta1.RepoS3": {
            "type": "object",
            "properties": {
                "bucket": {
                    "description": "The S3 bucket utilized for the repository\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "endpoint": {
                    "description": "A valid endpoint corresponding to the specified region\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "region": {
                    "description": "The region corresponding to the S3 bucket\n+kubebuilder:validation:Required",
                    "type": "string"
                }
            }
        },
        "v1beta1.RepoStatus": {
            "type": "object",
            "properties": {
                "bound": {
                    "description": "Whether or not the pgBackRest repository PersistentVolumeClaim is bound to a volume\n+optional",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the pgBackRest repository\n+kubebuilder:validation:Required",
                    "type": "string"
                },
                "replicaCreateBackupComplete": {
                    "description": "ReplicaCreateBackupReady indicates whether a backup exists in the repository as needed\nto bootstrap replicas.",
                    "type": "boolean"
                },
                "repoOptionsHash": {
                    "description": "A hash of the required fields in the spec for defining an Azure, GCS or S3 repository,\nUtilizd to detect changes to these fields and then execute pgBackRest stanza-create\ncommands accordingly.\n+optional",
                    "type": "string"
                },
                "stanzaCreated": {
                    "description": "Specifies whether or not a stanza has been successfully created for the repository\n+optional",
                    "type": "boolean"
                },
                "volume": {
                    "description": "The name of the volume the containing the pgBackRest repository\n+optional",
                    "type": "string"
                }
            }
        },
        "v1beta1.SchemalessObject": {
            "type": "object",
            "additionalProperties": true
        },
        "v1beta1.ServiceSpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.Metadata"
                        }
                    ]
                },
                "nodePort": {
                    "description": "The port on which this service is exposed when type is NodePort or\nLoadBalancer. Value must be in-range and not in use or the operation will\nfail. If unspecified, a port will be allocated if this Service requires one.\n- https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
                    "type": "integer"
                },
                "type": {
                    "description": "More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n\n+optional\n+kubebuilder:default=ClusterIP\n+kubebuilder:validation:Enum={ClusterIP,NodePort,LoadBalancer}",
                    "type": "string"
                }
            }
        },
        "v1beta1.TablespaceVolume": {
            "type": "object",
            "properties": {
                "dataVolumeClaimSpec": {
                    "description": "Defines a PersistentVolumeClaim for a tablespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n+kubebuilder:validation:Required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                },
                "name": {
                    "description": "The name for the tablespace, used as the path name for the volume.\nMust be unique in the instance set since they become the directory names.\n+kubebuilder:validation:Required\n+kubebuilder:validation:MinLength=1\n+kubebuilder:validation:Pattern=`^[a-z][a-z0-9]*$`\n+kubebuilder:validation:Type=string",
                    "type": "string"
                }
            }
        },
        "v1beta1.UserInterfaceSpec": {
            "type": "object",
            "properties": {
                "pgAdmin": {
                    "description": "Defines a pgAdmin user interface.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1beta1.PGAdminPodSpec"
                        }
                    ]
                }
            }
        },
        "vmQuery.TSMetricsRequest": {
            "type": "object",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "timeframe": {
                    "type": "string"
                }
            }
        },
        "vmQuery.TimeSeriesMetrics": {
            "type": "object",
            "properties": {
                "consumption": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "number"
                }
            }
        }
    }
}
